#include<iostream>
#include<conio.h>
#include<math.h>
#include<iomanip>

//Highly divisible triangular number
//   
//Problem 12
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//	
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

int fact(int no)
{
	int ctr=0;
	int sqr=sqrt(no);
	for(int i=1;i<sqr;i++)
	{
		if(no%i==0)
		{
			ctr+=2;
		}
	}
	if(sqr*sqr==no)
		ctr--;
	return ctr;
}
int main()
{
	double tri_no=0,fact_ctr=1,no=0;
	std::cout<<"Program to Find a triangle no with factos greater than a given no";
	std::cout<<"\nPE 500";
	std::cout<<"\n\nEnter no : ";
	std::cin>>no;
	for(int i=1;fact_ctr<=no;i++)
	{
		tri_no+=i;
		fact_ctr=fact(tri_no);
//		std::cout<<tr i_no<<" ";
	}
	std::cout.setf(std::ios::fixed);
	std::cout <<std::setprecision(0);
	std::cout<<"\nRequired Triangle no is : "<<tri_no;
	getch();
	return 0;
} 
